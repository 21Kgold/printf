NAME
		_printf
SYNOPSYS
		int _printf(const char *format, ...);
DESCRIPTION
		the function _printf() produce output according to a format as described below. the function _printf) write output to stdout, the standard output stream.

The function _printf() write the output under the control of a format string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg) are converted for output.
		
Format of the format string
	The format string is a character string. the format string is composed of zero or more directives: ordinary characters (not %), that are copied unchanged to the output stream; and conversion specifications, each of wich results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %, and ends with a conversion specifier.
	
Conversion specifiers
	A characyer that specifies the type of conversion to be applied.
	Alist of conversion specifiers and their meanings:
	
	d, i 
		
	s
		the const char * argument is expected to be a pointer to an array of characte type (pointer to a string). Characters from the array are written up to (but not including) a terminating null byte ('\0').
	c
		The int argument is converted to a char, and the resulting character is written
	%
		A '%' is written. No argument is converted. The complete conversion specification is '%%'.
	
RETURN VALUE

	Upon succesfull return, this function return the number of characters printed.
	
EXAMPLES

#include <limits.h>
#include <stdio.h>
#include "main.h"

/**
 * main - Entry point
 *
 * Return: Always 0
 */
int main(void)
{
    int len;
    int len2;
    unsigned int ui;
    void *addr;

    len = _printf("Let's try to printf a simple sentence.\n");
    len2 = printf("Let's try to printf a simple sentence.\n");
    ui = (unsigned int)INT_MAX + 1024;
    addr = (void *)0x7ffe637541f0;
    _printf("Length:[%d, %i]\n", len, len);
    printf("Length:[%d, %i]\n", len2, len2);
    _printf("Negative:[%d]\n", -762534);
    printf("Negative:[%d]\n", -762534);
    _printf("Unsigned:[%u]\n", ui);
    printf("Unsigned:[%u]\n", ui);
    _printf("Unsigned octal:[%o]\n", ui);
    printf("Unsigned octal:[%o]\n", ui);
    _printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
    printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
    _printf("Character:[%c]\n", 'H');
    printf("Character:[%c]\n", 'H');
    _printf("String:[%s]\n", "I am a string !");
    printf("String:[%s]\n", "I am a string !");
    _printf("Address:[%p]\n", addr);
    printf("Address:[%p]\n", addr);
    len = _printf("Percent:[%%]\n");
    len2 = printf("Percent:[%%]\n");
    _printf("Len:[%d]\n", len);
    printf("Len:[%d]\n", len2);
    _printf("Unknown:[%r]\n");
    printf("Unknown:[%r]\n");
    return (0);
}

output

	Let's try to printf a simple sentence.
	Let's try to printf a simple sentence.
	Length:[39, 39]
	Length:[39, 39]
	Negative:[-762534]
	Negative:[-762534]
	Unsigned:[2147484671]
	Unsigned:[2147484671]
	Unsigned octal:[20000001777]
	Unsigned octal:[20000001777]
	Unsigned hexadecimal:[800003ff, 800003FF]
	Unsigned hexadecimal:[800003ff, 800003FF]
	Character:[H]
	Character:[H]
	String:[I am a string !]
	String:[I am a string !]
	Address:[0x7ffe637541f0]
	Address:[0x7ffe637541f0]
	Percent:[%]
	Percent:[%]
	Len:[12]
	Len:[12]
	Unknown:[%r]
	Unknown:[%r]
	
SEE ALSO

	printf()
